#
# Build Settings
#
ARG telemetryBuildDir=/var/cache/build/telemetry
ARG telemetryArtifactsBin=/var/cache/build/bin
ARG telemetryRefCfgFile=testdata/config/localClient.yaml
ARG telemetryRefType=TEST-TELEMETRY-SERVICE
ARG telemetryRefJSON=testdata/telemetry/${telemetryRefType}/blob.json

#
# Go Settings
#
ARG GO_NO_PROXY=github.com/SUSE
ARG GOLANG_BASE=registry.suse.com/bci/golang
ARG GOLANG_VERSION=1.23-openssl

#
# SLE Verion Settings
ARG SLE_BCI_REG=registry.suse.com/bci
ARG SLE_BCI_IMAGE=bci-base
ARG SLE_BCI_VERSION=15.6

#
# Telemetry Client Settings
#
ARG user=susetelm
ARG group=${user}
ARG uid=1002
ARG gid=${uid}
ARG binPerm=6755
ARG cfgPerm=644
ARG binDirPerm=755
ARG cfgDirPerm=755
ARG homeDirPerm=750
ARG telemetryCfgDir=/etc/susetelemetry
ARG telemetryCfgFile=${telemetryCfgDir}/telemetry.yaml
ARG telemetryHomeDir=/var/lib/${user}
ARG telemetryBinDir=/usr/bin
ARG telemetryCertsDir=${telemetryHomeDir}/certs
ARG telemetryDataDir=${telemetryHomeDir}/data
ARG telemetryAppDir=/app
ARG telemetryAppData=${telemetryAppDir}/data
ARG telemetryJSON=${telemetryAppData}/blob.json

#
# Telemetry Client Config Settings
#
ARG logLevel=info
ARG telemetryBaseUrl=http://localhost:9999/telemetry
ARG telemetryDataStoreDriver=sqlite3
ARG telemetryDataStoreParams=${telemetryDataDir}/telemetry.db

#
# Build the code in BCI golang based image
#
FROM ${GOLANG_BASE}:${GOLANG_VERSION} AS builder

# args used by this image
ARG telemetryBuildDir
ARG telemetryAppDir
ARG telemetryArtifactsBin
ARG GO_NO_PROXY

# create a temporary workspace
WORKDIR ${telemetryBuildDir}

# ensure required tools are available
RUN set -euo pipefail; \
        zypper -n \
          install --no-recommends \
          git make; \
        zypper -n clean

# copy in local sources other than the Dockerfile and container build
# related items, with less frequently changing items coming first
COPY LICENSE Makefile Makefile.golang README.md ./
COPY ./doc ./doc/
COPY ./examples ./examples/
COPY go.mod go.sum telemetry.go ./
COPY ./testdata ./testdata/
COPY ./pkg ./pkg/
COPY ./cmd ./cmd/

RUN \
  make mod-download build test-coverage

RUN \
  mkdir -p ${telemetryArtifactsBin}; \
  for cmd in authenticator clientds generator; \
  do \
    cp ${telemetryBuildDir}/cmd/${cmd}/${cmd} ${telemetryArtifactsBin}/telemetry-${cmd}; \
  done

RUN \
  mkdir -p ${telemetryAppDir}; \
  cp ${telemetryBuildDir}/examples/app/app ${telemetryAppDir}/example

#
# Create the telemetry-tools image.
#
FROM ${SLE_BCI_REG}/${SLE_BCI_IMAGE}:${SLE_BCI_VERSION} AS telemetry-tools

# args used by this image
ARG user
ARG uid
ARG group
ARG gid
ARG binPerm
ARG cfgPerm
ARG binDirPerm
ARG cfgDirPerm
ARG homeDirPerm
ARG telemetryAppDir
ARG telemetryAppData
ARG telemetryArtifactsBin
ARG telemetryBinDir
ARG telemetryCertsDir
ARG telemetryDataDir
ARG telemetryCfgDir
ARG telemetryCfgFile
ARG telemetryHomeDir
ARG telemetryRefCfgFile
ARG logLevel
ARG telemetryBaseUrl
ARG telemetryDataStoreDriver
ARG telemetryDataStoreParams
ARG telemetryJSON
ARG telemetryRefJSON
ARG telemetryRefType

# create telemetry group, user and home directory
RUN \
  set -eu; \
  for dir in ${telemetryHomeDir} ${telemetryCertsDir} ${telemetryDataDir}; \
  do \
    mkdir -p ${dir}; \
    chown ${uid}:${gid} ${dir}; \
    chmod ${homeDirPerm} ${dir}; \
  done; \
  groupadd -g ${gid} ${group}; \
  useradd -r -g ${group} -u ${uid} -d ${telemetryHomeDir} -s /sbin/nologin -c "User for Telemetry Client Operations" ${user}

# create telemetry bin dir if needed
RUN \
  set -eu; \
  if [ ! -d ${telemetryBinDir} ]; then \
    mkdir ${telemetryBinDir}; \
    chown -R ${uid}:${gid} ${telemetryBinDir}; \
    chmod -R ${binDirPerm} ${telemetryBinDir}; \
  fi

# copy built binaries from builder image
COPY --from=builder --chmod=${binPerm} --chown=${uid}:${gid} ${telemetryArtifactsBin}/. ${telemetryBinDir}/
COPY --from=builder --chmod=${binPerm} --chown=${uid}:${gid} ${telemetryAppDir}/. ${telemetryAppDir}/

# create telemetry config dir - config file will be generated by
# the entrypoint.bash script based on env settings
RUN \
  set -eu; \
  mkdir -m ${cfgDirPerm} -p ${telemetryCfgDir}; \
  chown ${uid}:${gid} ${telemetryCfgDir}

# create telemetry app dir and copy in entrypoint.sh and telemetry data blob
RUN \
  set -eu; \
  mkdir -m 755 -p ${telemetryAppData}; \
  chown -R ${uid}:${gid} ${telemetryAppDir}

COPY --chmod=755 --chown=${uid}:${gid} docker/entrypoint.bash ${telemetryAppDir}/
COPY --chmod=640 --chown=${uid}:${gid} ${telemetryRefJSON} ${telemetryJSON}

# setup the environment variables
ENV TELEMETRY_USER=${user}
ENV TELEMETRY_GROUP=${group}
ENV TELEMETRY_CONFIG=${telemetryCfgFile}
ENV TELEMETRY_CERTS_DIR=${telemetryCertsDir}
ENV TELEMETRY_ENABLED=true
ENV TELEMETRY_BASE_URL=${telemetryBaseUrl}
ENV TELEMETRY_DATASTORE_DRIVER=${telemetryDataStoreDriver}
ENV TELEMETRY_DATASTORE_PARAMS=${telemetryDataStoreParams}
ENV TELEMETRY_LOG_LEVEL=${logLevel}
ENV TELEMETRY_JSON=${telemetryJSON}
ENV TELEMETRY_TYPE=${telemetryRefType}

# the entrypoint script will use the above env vars to
# a) create the config file if it doesn't exist
# b) run the specified tool using the specified config
#    as the specified user
ENTRYPOINT ["/app/entrypoint.bash"]
CMD ["help"]
